@charset "UTF-8";

/*
* justify-content: center || space-around || space-between || flex-end
* 1) center : 부모 요소를 중심으로 자식 요소를 가운데로 배치한다.
* 2) space-around: : 부모 요소를 중심으로 자식 요소들끼리 균등한 마진값을 갖는것은 space-between과 유사하다. 그러나 space-between과는 다르게 첫번째 요소와 마지막 요소의 끝지점에서 마진 값이 나머지 요소들과 같은 값으로 부여된다는 점에 차이가 있다.
* 3) space-between : 부모 요소를 중심으로 자식 요소들끼리 균등한 마진 값을 가지고 배치가 된다. 대신 첫번째 요소와 마지막 요소가 아예 끝점에 배치되기 때문에 유용하게 쓰인다.
* 4) flex-end
* 5) flex-start
****************** align **********************
* align-items: center || flex-start || flex-end
* 1) center: 높이를 100vh로 지정하게 될 시 최대 높이에서 절반으로 나눈 딱 중간지점에 요소가 위치하게 된다.
* 2) flex-start:
* 3) flex-end:
****************** flex-direction *******************
* 1) column: 가로로 배치되어 있던 요소들을 세로로 배치한다.
* 2) row: 세로로 배치되어 있던 요소들을 다시 가로로 배치한다. 다만, display:flex만 지정이 되어 있을때는 기본 값은 flex-direction:row이다.
*/

.mother{
    display:flex;
    justify-content:space-between;
    flex-direction:column;
    align-items:flex-start;
    height:100vh;
    border:1px solid red;
}
.children{width:100px;height:100px;background-color:blueviolet;}
